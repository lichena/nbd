{"version":3,"sources":["logo.svg","nbd.js","EssayForm.js","Histogram.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","nlpEx","nlp","extend","ngrams","p_x_hist","hist","t","X","r","alpha","px","Math","pow","ll","log","x","length","p_x","exp","LogGamma","factorial","compute_hist","data","i","compute_expected","total","expecteds","CHISQ","actual","expected","num_params","val","a","e","df","chisquaredtest","Z","DF","Chisqcdf","GI","A","T9","G","I","Gser","abs","A0","B0","A1","B1","AOLD","N","Gcf","Gammacdf","round","alert","n","S","EssayForm","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","onFormSubmit","preventDefault","onSubmit","style","height","width","onChange","type","React","Component","draw","word_count","d3","remove","margin","svg","append","attr","domain","range","call","bins","d","thresholds","ticks","histogram","y","selectAll","enter","x0","x1","continuous","graph_nbd","map","xi","Histogram","useEffect","className","App","result","text","doc","unigrams","obj","normal","count","frequency","sentences","wordCount","fmin","nelderMead","fx","chisq","console","nbd","renderHist","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,qMCKrCC,G,MAASC,IAAIC,OAAOC,MAmDtBC,EAAW,SAACC,EAAMC,GAClB,OAAO,SAACC,GAKJ,IAJA,IAAIC,EAAID,EAAE,GACNE,EAAQF,EAAE,GACVG,EAAKC,KAAKC,IAAKH,GAASA,EAAQH,GAAKE,GACrCK,EAAKR,EAAK,GAAKM,KAAKG,IAAIJ,GAAML,EAAK,GAAK,EACnCU,EAAI,EAAGA,EAAIV,EAAKW,OAAQD,IAC7BL,EAAKA,EAAKJ,GAAKE,EAAEO,EAAE,KAAOA,EAAE,IAAIN,EAAMH,IACtCO,GAAMR,EAAKU,GAAKJ,KAAKG,IAAIJ,GAAML,EAAKU,GAAK,EAE7C,OAAQF,IAIZI,EAAM,SAACF,EAAGP,EAAGC,EAAOH,GACpB,OAAOK,KAAKO,IAAIC,EAASX,EAAEO,EAAE,KAAKK,EAAUL,GAAGJ,KAAKO,IAAIC,EAASX,KAAKG,KAAKC,IAAIH,GAAOA,EAAMH,GAAGE,GAAGG,KAAKC,IAAIN,GAAGG,EAAMH,GAAGS,IAoBvHM,EAAe,SAACC,GAEhB,IADA,IAAIjB,EAAO,GACFkB,EAAI,EAAGA,EAAID,EAAKN,OAAQO,IAC7BlB,EAAKiB,EAAKC,IAAMlB,EAAKiB,EAAKC,IAAMlB,EAAKiB,EAAKC,IAAM,EAAI,EAExD,OAAOlB,GAGPmB,EAAmB,SAAChB,EAAGC,EAAOO,EAAQS,GAEtC,IADA,IAAIC,EAAY,GACPH,EAAI,EAAGA,EAAIP,EAAQO,IACxBG,EAAUH,GAAKE,EAAQR,EAAIM,EAAGf,EAAGC,EAAOgB,GAE5C,OAAOC,GAGPC,EAAQ,SAACC,EAAQC,EAAUC,GAC3B,GAAIF,EAAOZ,QAAUa,EAASb,OAAQ,OAAO,KAE7C,IADA,IAAIe,EAAM,EACDR,EAAI,EAAGA,EAAIK,EAAOZ,OAAQO,IAAK,CACpC,IAAIS,EAAIJ,EAAOL,GAAKK,EAAOL,GAAK,EAC5BU,EAAIJ,EAASN,GAAKM,EAASN,GAAK,EAChCU,EAAI,IACJF,IAAQC,EAAEC,IAAMD,EAAEC,GAAKA,GAG/B,IAAIC,EAAKN,EAAOZ,OAASc,EACzB,OAAOK,EAAeJ,EAAKG,IAG3BC,EAAiB,SAACC,EAAGC,GACxB,KAAIA,GAAI,GAAR,CAIG,IAAIC,EAoFR,SAAkBvB,EAAEiB,GACnB,IAAIO,EAEHA,EADGxB,GAAG,EACH,EACOA,EAAEiB,EAAE,EAnBhB,SAAczB,EAAEiC,GACZ,IAAI1B,EAAMH,KAAKG,IACXI,EAAMP,KAAKO,IACXuB,EAAG,EAAED,EACLE,EAAED,EACFE,EAAE,EACN,KAAOF,EAAK,KAAFC,GAENA,GADAD,EAAGA,EAAGlC,GAAGiC,EAAEG,GAEXA,GAAI,EAGR,OADAD,GAAIxB,EAAIsB,EAAE1B,EAAIP,GAAGA,EAAEY,EAASqB,IAS3BI,CAAK7B,EAAEiB,GA9CZ,SAAazB,EAAEiC,GACX,IAAI1B,EAAMH,KAAKG,IACXI,EAAMP,KAAKO,IACX2B,EAAMlC,KAAKkC,IACXC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG1C,EACH2C,EAAK,EACLC,EAAE,EACN,KAAON,GAAKG,EAAGE,GAAMF,GAAI,MACrBE,EAAKF,EAILA,EAAGzC,GAFHuC,EAAGE,IADHG,GAAI,GACKX,GAAGM,GAEJK,EAAEH,EAEVF,GADAG,EAAG1C,GAFHwC,EAAGE,GAAIE,EAAEX,GAAGO,GAEJI,EAAEF,EAEVF,GAAME,EACND,GAAMC,EACNA,EAAG,EAGV,OAAO,EADK/B,EAAIsB,EAAE1B,EAAIP,GAAGA,EAAEY,EAASqB,IAAIQ,EA0BpCI,CAAIrC,EAAEiB,GAEV,OAAOO,EA7FSc,CAASjB,EAAE,EAAEC,EAAG,GAC7B,OAAO,EAAI1B,KAAK2C,MAAe,IAAThB,GAAiB,IAJnCiB,MAAM,wCAgCVnC,EAAY,SAACoC,GACb,OAAO7C,KAAKO,IAAIC,EAASqC,EAAI,KAMjC,SAASrC,EAASiB,GACd,IAAItB,EAAMH,KAAKG,IACd2C,EAAE,EAAE,YAAYrB,EAAE,aAAaA,EAAE,GAAG,aAAaA,EAAE,GAAG,aAAaA,EAAE,GAAG,cAAcA,EAAE,GAAG,YAAcA,EAAE,GAE/G,OADSA,EAAE,IAAItB,EAAIsB,EAAE,MAAMA,EAAE,KAAKtB,EAAM,cAAF2C,G,IC/HtBC,E,YAlCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,6CAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPH,E,0EAUNE,GACXC,KAAKC,SAAS,CAACN,MAAOI,EAAMG,OAAOP,U,mCAGxBI,GACXC,KAAKP,MAAMU,aAAaH,KAAKN,MAAMC,OACnCI,EAAMK,mB,+BAIN,OACE,0BAAMC,SAAUL,KAAKF,cACnB,+BACE,8BACEQ,MAAO,CAAEC,OAAQ,IAAKC,MAAO,KAC7Bb,MAAOK,KAAKN,MAAMC,MAClBc,SAAUT,KAAKJ,gBAEnB,2BAAOc,KAAK,SAASf,MAAM,gB,GA7BbgB,IAAMC,W,OCUxBC,EAAO,SAACpB,GACV,GAAKA,EAAMrC,KAAX,CAEA,IAAIA,EAAOqC,EAAMrC,KACbd,EAAImD,EAAMnD,EACVC,EAAQkD,EAAMlD,MACdH,EAAIqD,EAAMrD,EACV0E,EAAarB,EAAMqB,WAGvBC,IAAU,kBAAkBC,SAG5B,IAGIC,EAAe,GAAfA,EAA0B,GAA1BA,EAAsC,GAAtCA,EAAgD,GACpDT,EAAQ,IAAMS,EAAcA,EAC5BV,EAAS,IAAMU,EAAaA,EAGxBC,EAAMH,IAAU,cACfI,OAAO,OACPC,KAAK,QAASZ,EAAQS,EAAcA,GACpCG,KAAK,SAAUb,EAASU,EAAaA,GACrCE,OAAO,KACPC,KAAK,YACF,aAAeH,EAAc,IAAMA,EAAa,KAGpDpE,EAAIkE,MACHM,OAAO,CAAC,EAAG,KACXC,MAAM,CAAC,EAAGd,IAEfU,EAAIC,OAAO,KACNC,KAAK,YAAa,eAAiBb,EAAS,KAC5CgB,KAAKR,IAAclE,IAGxB,IAMI2E,EANYT,MACXpB,OAAM,SAAS8B,GAAK,OAAOA,KAC3BJ,OAAOxE,EAAEwE,UACTK,WAAW7E,EAAE8E,MA7BH,IAgCJC,CAAUxE,GAGjByE,EAAId,MACHO,MAAM,CAACf,EAAQ,IACpBsB,EAAER,OAAO,CAAC,EAAGN,IAAOS,GAAM,SAASC,GAAK,OAAOA,EAAE3E,YACjDoE,EAAIC,OAAO,KACNI,KAAKR,IAAYc,IAGtBX,EAAIY,UAAU,QACT1E,KAAKoE,GACLO,QACAZ,OAAO,QACHC,KAAK,IAAK,GACVA,KAAK,aAAa,SAASK,GAAK,MAAO,aAAe5E,EAAE4E,EAAEO,IAAM,IAAMH,EAAEJ,EAAE3E,QAAU,OACpFsE,KAAK,SAAS,SAASK,GAAK,OAAO5E,EAAE4E,EAAEQ,IAAMpF,EAAE4E,EAAEO,IAAM,KACvDZ,KAAK,UAAU,SAASK,GAAK,OAAOlB,EAASsB,EAAEJ,EAAE3E,WACjDwD,MAAM,OAAQ,WAGvB,IAAI4B,EFoDiB,SAAC5F,EAAGC,EAAOH,EAAG0E,GACnC,OAAO,SAACjE,GACJ,OAAOiE,EAAa/D,EAAIF,EAAGP,EAAGC,EAAOH,IEtDxB+F,CAAU7F,EAAGC,EAAOH,EAAG0E,GAExCI,EAAIC,OAAO,YACNC,KAAK,KAAK,SAASK,GAAK,OAAOV,MAChClE,EAAE8E,MAAM,KAAKS,KAAI,SAASC,GACtB,MAAO,CAAExF,EAAEwF,EAAG,IAAMR,EAAEK,EAAWG,YAEpC/B,MAAM,SAAU,OAChBA,MAAM,OAAQ,UAGNgC,EArFC,SAAC7C,GAIf,OAHA8C,qBAAU,WACN1B,EAAKpB,KACN,CAACA,EAAMrC,KAAOqC,EAAMrC,KAAKN,OAAS,IAC9B,yBAAK0F,UAAU,eC2CXC,E,YA1Cb,WAAYhD,GAAQ,IAAD,8BACjB,4CAAMA,KAIRU,aAAe,SAAC/C,GACd,IAAIsF,EHUW,SAACC,EAAMjC,GACtB,IAAIkC,EAAM9G,EAAM6G,GACZvF,EAAO,GACX,OAAOsD,GACH,IAAK,SACDtD,EATG,SAACwF,GACZ,OAAOA,EAAIC,WAAWT,KAAI,SAAAU,GAAG,OAAIA,EAAIC,OAAOjG,UAQ7BA,CAAO8F,GACd,MACJ,IAAK,YACDxF,EAjBM,SAACwF,GACf,OAAOA,EAAIC,WAAWT,KAAI,SAAAU,GAAG,OAAIA,EAAIE,SAgBtBC,CAAUL,GAIzB,IAAIxG,EAAIwG,EAAIM,YAAYpG,OACpBgE,EAAa8B,EAAIO,YAEjBhH,EAAOgB,EAAaC,GACpBsF,EAASU,IAAKC,WAAWnH,EAASC,EAAMC,GAAI,CAAC,GAAK,IAAM,MACxDE,EAAIoG,EAAO7F,EAAE,GACbN,EAAQmG,EAAO7F,EAAE,GACjBF,EAAK+F,EAAOY,GAEZ9F,EAAYF,EAAiBhB,EAAGC,EAAOJ,EAAKW,OAAQV,GAEpDmH,EAAQ9F,EAAMtB,EAAMqB,EAAW,GAGnC,OAFAgG,QAAQ5G,IAAI2G,GAEL,CAAC,EAAKjH,EAAG,MAASC,EAAO,GAAMI,EAAI,KAAQS,EAAM,EAAKhB,EAAG,WAAc0E,GGpCjE2C,CAAIrG,EAAM,aACnBsF,GACF,EAAKzC,SAAS,CAAC3D,EAAGoG,EAAOpG,EAAGC,MAAOmG,EAAOnG,MAAOa,KAAMsF,EAAOtF,KAAMhB,EAAGsG,EAAOtG,EAAG0E,WAAY4B,EAAO5B,cARrF,EAYnB4C,WAAa,WACX,GAAI,EAAKhE,MAAMtC,MAAQ,EAAKsC,MAAMpD,GAAK,EAAKoD,MAAMnD,OAAS,EAAKmD,MAAMoB,YAAc,EAAKpB,MAAMtD,EAC7F,OAAO,kBAAC,EAAD,CAAWgB,KAAM,EAAKsC,MAAMtC,KAAMd,EAAG,EAAKoD,MAAMpD,EAAGC,MAAO,EAAKmD,MAAMnD,MAAOH,EAAG,EAAKsD,MAAMtD,EAAG0E,WAAY,EAAKpB,MAAMoB,cAZ7H,EAAKpB,MAAQ,GAFI,E,sEAkBjB,OACE,yBAAK8C,UAAU,OACb,kBAAC,EAAD,CAAWrC,aAAcH,KAAKG,eAC7BH,KAAK0D,aACN,2BAAI1D,KAAKN,MAAMpD,EAAI,QAAS0D,KAAKN,MAAMpD,EAAEqH,QAAQ,GAAK,IACtD,2BAAI3D,KAAKN,MAAMnD,MAAQ,YAAcyD,KAAKN,MAAMnD,MAAMoH,QAAQ,GAAK,IACnE,2BAAI3D,KAAKN,MAAMtD,EAAI,QAAU4D,KAAKN,MAAMtD,EAAI,IAC5C,2BAAI4D,KAAKN,MAAM/C,GAAK,qBAAuBqD,KAAKN,MAAM/C,GAAK,IAC3D,2BAAIqD,KAAKN,MAAMtC,KAAO,6BAA+B4C,KAAKN,MAAMtC,KAAKN,OAAS,IAC9E,2BAAIkD,KAAKN,MAAMoB,WAAa,4BAA8Bd,KAAKN,MAAMoB,WAAa,S,GA5BxEH,IAAMC,WCGJgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ed2227ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import nlp from 'compromise'\nimport ngrams from 'compromise-ngrams'\nimport fmin from 'fmin'\nimport fs from 'fs'\n\nconst nlpEx  = nlp.extend(ngrams);\n\n\n// export const parse = (filepath) => {\n//     fs.readFile(filepath, 'utf-8', (err, data) => { \n//         if (err) throw err; \n//         let {r, alpha, data, t, word_count} = nbd(data, 'frequency');\n//         console.log(\"r: \" + r, \"\\talpha: \" + alpha, \"\\tword_count: \"+word_count);\n//     }) \n// }\n\n// Look at the frequency distribution of words within a document.\nconst frequency = (doc) => {\n    return doc.unigrams().map(obj => obj.count);\n}\n\n// look at the length distributionof words within a document\nconst length = (doc) => {\n    return doc.unigrams().map(obj => obj.normal.length);\n}\n\nexport const nbd = (text, type) => {\n    let doc = nlpEx(text);\n    let data = [];\n    switch(type) {\n        case 'length':\n            data = length(doc);\n            break;\n        case 'frequency':\n            data = frequency(doc);\n            break;\n    }\n\n    let t = doc.sentences().length\n    let word_count = doc.wordCount();\n\n    let hist = compute_hist(data); // histogram basically, actuals[i] = # of words with frequency i\n    let result = fmin.nelderMead(p_x_hist(hist, t), [0.5, 0.5], null);\n    let r = result.x[0];\n    let alpha = result.x[1];\n    let ll = result.fx;\n\n    let expecteds = compute_expected(r, alpha, hist.length, t); // expecteds[i] = # of words with frequency i\n\n    let chisq = CHISQ(hist, expecteds, 2);\n    console.log(chisq)\n    // return {'r': r, 'alpha': alpha, 'data': data, 'chisq': chisq};\n    return {'r': r, 'alpha': alpha, 'll': ll, 'data': data, 't': t, 'word_count': word_count};\n}\n\n// assumes hist[0] is 0\nlet p_x_hist = (hist, t) => {\n    return (X) => {\n        let r = X[0];\n        let alpha = X[1];\n        let px = Math.pow((alpha / (alpha + t)), r)\n        let ll = hist[1] ? Math.log(px) * hist[1] : 0;\n        for (var x = 2; x < hist.length; x++) {\n            px = px * t * (r+x-2) / ((x-1)*(alpha+t));\n            ll += hist[x] ? Math.log(px) * hist[x] : 0;\n        }\n        return -ll;\n    }\n}\n\nlet p_x = (x, r, alpha, t) => {\n    return Math.exp(LogGamma(r+x-1))/(factorial(x)*Math.exp(LogGamma(r)))*Math.pow(alpha/(alpha+t),r)*Math.pow(t/(alpha+t),x);\n}\n\nlet LL = (p_x) => {\n    return Math.log(p_x);\n}\n\n// X[0] = r, X[1] = alpha point wise\nlet MLE = (data, word_count) => {\n    return (X) => {\n        var r = X[0]\n        var alpha = X[1];\n        let loglikelihood = 0;\n        for (var i = 0; i < data.length; i++) {\n            loglikelihood += LL(p_x(data[i], r, alpha, word_count));\n        }\n        return -loglikelihood;\n    }\n}\n\nlet compute_hist = (data) => {\n    let hist = [];\n    for (var i = 0; i < data.length; i++) {\n        hist[data[i]] = hist[data[i]] ? hist[data[i]] + 1 : 1;\n    }\n    return hist;\n}\n\nlet compute_expected = (r, alpha, length, total) => {\n    let expecteds = [];\n    for (var i = 0; i < length; i++) {\n        expecteds[i] = total * p_x(i, r, alpha, total);\n    }\n    return expecteds;\n}\n\nlet CHISQ = (actual, expected, num_params) => {\n    if (actual.length != expected.length) return null;\n    let val = 0;\n    for (var i = 0; i < actual.length; i++) {\n        let a = actual[i] ? actual[i] : 0;\n        let e = expected[i] ? expected[i] : 0;\n        if (e > 0) {\n            val += (a-e) * (a-e) / e;\n        }\n    }\n    let df = actual.length - num_params;\n    return chisquaredtest(val, df);\n}\n\nlet chisquaredtest = (Z, DF) => {\n\tif (DF<=0) {\n        alert(\"Degrees of freedom must be positive\")\n        return;\n\t} \n    let Chisqcdf=Gammacdf(Z/2,DF/2);\n    return 1 - Math.round(Chisqcdf*100000)/100000;\n}\n\n// for graphing\nexport const graph_nbd = (r, alpha, t, word_count) => {\n    return (x) => {\n        return word_count * p_x(x, r, alpha, t)\n    }\n}\n\n// Math functions below\n// math for nbd\nconst g = 7;\nconst C = [0.99999999999980993, 676.5203681218851, -1259.1392167224028,771.32342877765313, -176.61502916214059, 12.507343278686905, -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7];\n\nlet gamma = (z) => {\n    if (z < 0.5) return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));\n    else {\n        z -= 1;\n        var x = C[0];\n        for (var i = 1; i < g + 2; i++)\n        x += C[i] / (z + i);\n\n        var t = z + g + 0.5;\n        return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\n    }\n}\n\nlet factorial = (n) => {\n    return Math.exp(LogGamma(n + 1));\n}\n  \n\n\n// math for chisq\nfunction LogGamma(Z) {\n    let log = Math.log;\n\tvar S=1+76.18009173/Z-86.50532033/(Z+1)+24.01409822/(Z+2)-1.231739516/(Z+3)+.00120858003/(Z+4)-.00000536382/(Z+5);\n\tvar LG= (Z-.5)*log(Z+4.5)-(Z+4.5)+log(S*2.50662827465);\n\treturn LG\n}\n\nfunction Gcf(X,A) {        // Good for X>A+1\n    let log = Math.log;\n    let exp = Math.exp;\n    let abs = Math.abs;\n    var A0=0;\n    var B0=1;\n    var A1=1;\n    var B1=X;\n    var AOLD=0;\n    var N=0;\n    while (abs((A1-AOLD)/A1)>.00001) {\n        AOLD=A1;\n        N=N+1;\n        A0=A1+(N-A)*A0;\n        B0=B1+(N-A)*B0;\n        A1=X*A0+N*A1;\n        B1=X*B0+N*B1;\n        A0=A0/B1;\n        B0=B0/B1;\n        A1=A1/B1;\n        B1=1;\n    }\n    var Prob=exp(A*log(X)-X-LogGamma(A))*A1;\n\treturn 1-Prob;\n}\n\nfunction Gser(X,A) {        // Good for X<A+1.\n    let log = Math.log;\n    let exp = Math.exp;\n    var T9=1/A;\n    var G=T9;\n    var I=1;\n    while (T9>G*.00001) {\n        T9=T9*X/(A+I);\n        G=G+T9;\n        I=I+1;\n    }\n    G=G*exp(A*log(X)-X-LogGamma(A));\n    return G\n}\n\nfunction Gammacdf(x,a) {\n\tvar GI;\n\tif (x<=0) {\n\t\tGI=0\n\t} else if (x<a+1) {\n\t\tGI=Gser(x,a)\n\t} else {\n\t\tGI=Gcf(x,a)\n\t}\n\treturn GI\n}\n\n\n","import React from 'react';\nimport { nbd } from './nbd';\n\nclass EssayForm extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: 'Copy paste some text you wish to analyze!'\n      };\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(event) {\n      this.setState({value: event.target.value});\n    }\n  \n    handleSubmit(event) {\n      this.props.onFormSubmit(this.state.value)\n      event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <textarea \n              style={{ height: 400, width: 300 }}\n              value={this.state.value} \n              onChange={this.handleChange} />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n  }\n\n  export default EssayForm;","import React, {useEffect} from 'react';\nimport * as d3 from \"d3\";\nimport {graph_nbd} from './nbd'\n\n\nconst Histogram = (props) => {\n    useEffect(()=>{\n        draw(props)\n    }, [props.data ? props.data.length : 0])\n    return <div className=\"histogram\"/>\n}\n\n\nconst draw = (props) => {\n    if (!props.data) return;\n\n    let data = props.data;\n    let r = props.r;\n    let alpha = props.alpha;\n    let t = props.t;\n    let word_count = props.word_count;\n\n    \n    d3.select('.histogram > *').remove(); // remove previous hist\n\n    // let x_range = 20;\n    let num_bins = 10;\n\n    // set the dimensions and margins of the graph\n    var margin = {top: 10, right: 30, bottom: 30, left: 40},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\".histogram\")\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\",\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // X axis: scale and draw:\n    var x = d3.scaleLinear()\n        .domain([1, 10])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n        .range([0, width]);\n        \n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n\n    // set the parameters for the histogram\n    var histogram = d3.histogram()\n        .value(function(d) { return d; })   // I need to give the vector of value\n        .domain(x.domain())  // then the domain of the graphic\n        .thresholds(x.ticks(num_bins)); // then the numbers of bins\n\n    // And apply this function to data to get the bins\n    var bins = histogram(data);\n\n    // Y axis: scale and draw:\n    var y = d3.scaleLinear()\n        .range([height, 0]);\n    y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n    // append the bar rectangles to the svg element\n    svg.selectAll(\"rect\")\n        .data(bins)\n        .enter()\n        .append(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n            .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) - 1 ; })\n            .attr(\"height\", function(d) { return height - y(d.length); })\n            .style(\"fill\", \"#69b3a2\")\n\n    // graph the function\n    var continuous = graph_nbd(r, alpha, t, word_count);\n\n    svg.append(\"svg:path\")\n        .attr(\"d\", function(d) { return d3.line() (\n        x.ticks(100).map(function(xi) {\n            return [ x(xi+0.5), y(continuous(xi)) ]\n        }))})\n        .style(\"stroke\", \"red\")    // set the line colour\n        .style(\"fill\", \"none\");    // set the fill colour \n}\n\n  export default Histogram;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport EssayForm from './EssayForm'\n\nimport {nbd} from './nbd'\nimport Histogram from './Histogram';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n  \n  onFormSubmit = (data) => {\n    let result = nbd(data, 'frequency');\n    if (result) {\n      this.setState({r: result.r, alpha: result.alpha, data: result.data, t: result.t, word_count: result.word_count})\n    }\n  }\n\n  renderHist = () => {\n    if (this.state.data && this.state.r && this.state.alpha && this.state.word_count && this.state.t) {\n      return <Histogram data={this.state.data} r={this.state.r} alpha={this.state.alpha} t={this.state.t} word_count={this.state.word_count}/>\n    }\n  }\n  render()  { \n    return (\n      <div className=\"App\">\n        <EssayForm onFormSubmit={this.onFormSubmit}/>\n        {this.renderHist()}\n        <p>{this.state.r ? 'r is '+ this.state.r.toFixed(3) : ''}</p>\n        <p>{this.state.alpha ? 'alpha is ' + this.state.alpha.toFixed(3) : ''}</p>\n        <p>{this.state.t ? 't is ' + this.state.t : ''}</p>\n        <p>{this.state.ll ? 'Log-Likelihood is ' + this.state.ll : ''}</p>\n        <p>{this.state.data ? 'number of unique words is ' + this.state.data.length : ''}</p>\n        <p>{this.state.word_count ? 'number of total words is ' + this.state.word_count : ''}</p>\n      </div>\n    );\n  }\n}\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <EssayForm/>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}