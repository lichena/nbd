{"version":3,"sources":["nbd.js","EssayForm.js","Histogram.js","App.js","serviceWorker.js","index.js"],"names":["nlpEx","nlp","extend","ngrams","p_x_hist","hist","t","X","r","alpha","px","Math","pow","ll","log","x","length","compute_hist","data","i","compute_expected","unique_words","expecteds","CHISQ","actual","expected","num_params","val","right_censor_actual","right_censor_expected","df","chisquaredtest","Z","DF","Chisqcdf","a","GI","A","exp","T9","G","I","LogGamma","Gser","abs","A0","B0","A1","B1","AOLD","N","Gcf","Gammacdf","round","alert","S","EssayForm","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","onFormSubmit","preventDefault","onSubmit","style","height","width","onChange","type","React","Component","draw","bins","bin_actual","x0","x1","bin_expected","push","word_count","d3","remove","margin","svg","append","attr","domain","range","call","y","d","selectAll","enter","text","Histogram","useEffect","className","App","result","doc","unigrams","map","obj","normal","count","frequency","sentences","wordCount","fmin","nelderMead","fx","chisq","toFixed","nbd","prevState","tableData","renderHist","alignItems","justifyContent","display","flexDirection","padding","paddingLeft","paddingRight","textAlign","alignContent","tableStyle","Table","columns","Header","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.955ef924.chunk.js","sourcesContent":["import nlp from 'compromise'\nimport ngrams from 'compromise-ngrams'\nimport fmin from 'fmin'\nimport fs from 'fs'\n\nconst nlpEx  = nlp.extend(ngrams);\n\n\n// Look at the frequency distribution of words within a document.\nconst frequency = (doc) => {\n    return doc.unigrams().map(obj => obj.count);\n}\n\n// look at the length distributionof words within a document\nconst length = (doc) => {\n    return doc.unigrams().map(obj => obj.normal.length);\n}\n\nexport const nbd = (text, type) => {\n    let doc = nlpEx(text);\n    let data = [];\n    switch(type) {\n        case 'length':\n            data = length(doc);\n            break;\n        case 'frequency':\n            data = frequency(doc);\n            break;\n    }\n\n    let t = doc.sentences().length;\n    let word_count = doc.wordCount();\n\n    let hist = compute_hist(data); // histogram basically, actuals[i] = # of words with frequency i\n    let result = fmin.nelderMead(p_x_hist(hist, t), [1, 1], null);\n    let r = result.x[0];\n    let alpha = result.x[1];\n    let ll = -result.fx;\n\n    \n    \n    let expecteds = compute_expected(r, alpha, doc.unigrams().length, hist.length, t); // expecteds[i] = # of words with frequency i\n\n    let {chisq, df} = CHISQ(hist, expecteds, 2);\n\n    return {\n        'r': r.toFixed(3), \n        'alpha': alpha.toFixed(3), \n        'll': ll.toFixed(3), \n        'data': data, \n        't': t.toFixed(3), \n        'word_count': word_count, \n        'chisq': chisq.toFixed(3), \n        'df': df,\n        'actual': hist,\n        'expected': expecteds,\n        'unique_words': data.length,\n    };\n}\n\n// assumes hist[0] is 0\nlet p_x_hist = (hist, t) => {\n    return (X) => {\n        let r = X[0];\n        let alpha = X[1];\n        let px = Math.pow((alpha / (alpha + t)), r)\n        let ll = hist[1] ? Math.log(px) * hist[1] : 0;\n        for (var x = 2; x < hist.length; x++) {\n            px = px * t * (r+x-2) / ((x-1)*(alpha+t));\n            ll += hist[x] ? Math.log(px) * hist[x] : 0;\n        }\n        return -ll;\n    }\n}\n\nlet p_x = (x, r, alpha, t) => {\n    return Math.exp(LogGamma(r+x-1))/(factorial(x)*Math.exp(LogGamma(r)))*Math.pow(alpha/(alpha+t),r)*Math.pow(t/(alpha+t),x);\n}\n\nlet LL = (p_x) => {\n    return Math.log(p_x);\n}\n\n// X[0] = r, X[1] = alpha point wise\nlet MLE = (data, word_count) => {\n    return (X) => {\n        var r = X[0]\n        var alpha = X[1];\n        let loglikelihood = 0;\n        for (var i = 0; i < data.length; i++) {\n            loglikelihood += LL(p_x(data[i], r, alpha, word_count));\n        }\n        return -loglikelihood;\n    }\n}\n\nlet compute_hist = (data) => {\n    let hist = [];\n    for (var i = 0; i < data.length; i++) {\n        hist[data[i]] = hist[data[i]] ? hist[data[i]] + 1 : 1;\n    }\n    return hist;\n}\n\nlet compute_expected = (r, alpha, unique_words, length, t) => {\n    let expecteds = [];\n    let px = Math.pow((alpha / (alpha + t)), r)\n    expecteds[1] = px * unique_words;\n    for (var x = 2; x < length; x++) {\n        px = px * t * (r+x-2) / ((x-1)*(alpha+t));\n        expecteds[x] = px * unique_words;\n    }\n    return expecteds;\n}\n\n// right censors on first empty cell reached\nlet CHISQ = (actual, expected, num_params) => {\n    if (actual.length != expected.length) return null;\n    let val = 0;\n    let i = 1;\n    while (i < actual.length && actual[i]) {\n        if (expected[i] > 0) {\n            val += (actual[i] - expected[i]) * (actual[i] - expected[i]) / expected[i];\n        }\n        i++;\n    }\n\n    let right_censor_actual = 0;\n    let right_censor_expected = 0;\n    let df = i + 1 - num_params\n    while (i < actual.length) {\n        right_censor_actual += actual[i] ? actual[i] : 0;\n        right_censor_expected += expected[i] ? expected[i] : 0;\n        i++;\n    }\n    if (right_censor_actual && right_censor_expected) {\n        val += (right_censor_actual - right_censor_expected) * (right_censor_actual - right_censor_expected) / right_censor_expected;\n    }\n\n    return {'chisq': chisquaredtest(val, df), 'df': df};\n}\n\nlet chisquaredtest = (Z, DF) => {\n\tif (DF<=0) {\n        alert(\"Degrees of freedom must be positive\")\n        return;\n\t} \n    let Chisqcdf=Gammacdf(Z/2,DF/2);\n    return 1 - Math.round(Chisqcdf*100000)/100000;\n}\n\n// for graphing\nexport const graph_nbd = (r, alpha, t, word_count) => {\n    return (x) => {\n        return word_count * p_x(x, r, alpha, t)\n    }\n}\n\n// Math functions below\n// math for nbd\nconst g = 7;\nconst C = [0.99999999999980993, 676.5203681218851, -1259.1392167224028,771.32342877765313, -176.61502916214059, 12.507343278686905, -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7];\n\nlet gamma = (z) => {\n    if (z < 0.5) return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));\n    else {\n        z -= 1;\n        var x = C[0];\n        for (var i = 1; i < g + 2; i++)\n        x += C[i] / (z + i);\n\n        var t = z + g + 0.5;\n        return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\n    }\n}\n\nlet factorial = (n) => {\n    return Math.exp(LogGamma(n + 1));\n}\n  \n\n\n// math for chisq\nfunction LogGamma(Z) {\n    let log = Math.log;\n\tvar S=1+76.18009173/Z-86.50532033/(Z+1)+24.01409822/(Z+2)-1.231739516/(Z+3)+.00120858003/(Z+4)-.00000536382/(Z+5);\n\tvar LG= (Z-.5)*log(Z+4.5)-(Z+4.5)+log(S*2.50662827465);\n\treturn LG\n}\n\nfunction Gcf(X,A) {        // Good for X>A+1\n    let log = Math.log;\n    let exp = Math.exp;\n    let abs = Math.abs;\n    var A0=0;\n    var B0=1;\n    var A1=1;\n    var B1=X;\n    var AOLD=0;\n    var N=0;\n    while (abs((A1-AOLD)/A1)>.00001) {\n        AOLD=A1;\n        N=N+1;\n        A0=A1+(N-A)*A0;\n        B0=B1+(N-A)*B0;\n        A1=X*A0+N*A1;\n        B1=X*B0+N*B1;\n        A0=A0/B1;\n        B0=B0/B1;\n        A1=A1/B1;\n        B1=1;\n    }\n    var Prob=exp(A*log(X)-X-LogGamma(A))*A1;\n\treturn 1-Prob;\n}\n\nfunction Gser(X,A) {        // Good for X<A+1.\n    let log = Math.log;\n    let exp = Math.exp;\n    var T9=1/A;\n    var G=T9;\n    var I=1;\n    while (T9>G*.00001) {\n        T9=T9*X/(A+I);\n        G=G+T9;\n        I=I+1;\n    }\n    G=G*exp(A*log(X)-X-LogGamma(A));\n    return G\n}\n\nfunction Gammacdf(x,a) {\n\tvar GI;\n\tif (x<=0) {\n\t\tGI=0\n\t} else if (x<a+1) {\n\t\tGI=Gser(x,a)\n\t} else {\n\t\tGI=Gcf(x,a)\n\t}\n\treturn GI\n}\n\n\n","import React from 'react';\nimport { nbd } from './nbd';\n\nclass EssayForm extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: 'Copy paste some text you wish to analyze!'\n      };\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(event) {\n      this.setState({value: event.target.value});\n    }\n  \n    handleSubmit(event) {\n      this.props.onFormSubmit(this.state.value)\n      event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <textarea \n              style={{ height: 400, width: 300 }}\n              value={this.state.value} \n              onChange={this.handleChange} />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n  }\n\n  export default EssayForm;","import React, {useEffect} from 'react';\nimport * as d3 from \"d3\";\n// import {graph_nbd} from './nbd'\n\n\nconst Histogram = (props) => {\n    useEffect(()=>{\n        draw(props);\n    }, [props.actual ? props.actual.length : 0])\n    return <div className=\"histogram\"/>\n}\n\nconst draw = (props) => {\n    // if (!props.actual) return;\n    let actual = props.actual;\n    let expected = props.expected;\n    let bins = []\n    for (var i = 1; i < actual.length; i++) {\n        let bin_actual = {};\n        bin_actual.val = actual[i] ? actual[i] : 0;\n        bin_actual.x0 = i;\n        bin_actual.x1 = i+1;\n        bin_actual.type = 'actual'\n        \n        let bin_expected = {};\n        bin_expected.val = expected[i] ? expected[i] : 0;\n        bin_expected.x0 = i;\n        bin_expected.x1 = i+1;\n        bin_expected.type = 'expected'\n\n        bins.push(bin_actual)\n        bins.push(bin_expected)\n    }\n\n    // let data = props.data;\n    // let data = props.data;\n    let r = props.r;\n    let alpha = props.alpha;\n    let t = props.t;\n    let word_count = props.word_count;\n\n    \n    d3.select('.histogram > *').remove(); // remove previous hist\n\n    // let x_range = 20;\n    // let num_bins = actual.length;\n\n    // set the dimensions and margins of the graph\n    var margin = {top: 10, right: 30, bottom: 30, left: 40},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\".histogram\")\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\",\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // X axis: scale and draw:\n    var x = d3.scaleLinear()\n        .domain([1, 20])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n        .range([0, width]);\n        \n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n\n    // Y axis: scale and draw:\n    var y = d3.scaleLinear()\n        .range([height, 0]);\n    y.domain([0, d3.max(bins, function(d) { return d.val; })]);   // d3.hist has to be called before the Y axis obviously\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n    // append the bar rectangles to the svg element\n    svg.selectAll(\"rect\")\n        .data(bins)\n        .enter()\n        .append(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", function(d) { \n                if (d.type == 'actual') {\n                    return \"translate(\" + x(d.x0) + \",\" + y(d.val) + \")\"; \n                } else {\n                    return \"translate(\" + (x(d.x0) + (x(d.x1) - x(d.x0) - 1)*0.5) + \",\" + y(d.val) +  \")\";\n                }\n            })\n            .attr(\"width\", function(d) { return (x(d.x1) - x(d.x0) - 1) * 0.5 ; })\n            .attr(\"height\", function(d) { return height - y(d.val); })\n            .style(\"fill\", function(d) {\n                if (d.type == 'actual') {\n                    return \"#69b3a2\";\n                } else {\n                    return \"#404080\";\n                }\n            } )\n\n    // Handmade legend\n    svg.append(\"circle\").attr(\"cx\",200).attr(\"cy\",130).attr(\"r\", 6).style(\"fill\", \"#69b3a2\")\n    svg.append(\"circle\").attr(\"cx\",200).attr(\"cy\",160).attr(\"r\", 6).style(\"fill\", \"#404080\")\n    svg.append(\"text\").attr(\"x\", 220).attr(\"y\", 130).text(\"Actual\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\n    svg.append(\"text\").attr(\"x\", 220).attr(\"y\", 160).text(\"Expected\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\n}\n\n  export default Histogram;","import React from 'react';\nimport { useTable } from 'react-table'\n\nimport './App.css';\n\nimport EssayForm from './EssayForm'\n\nimport {nbd} from './nbd'\nimport Histogram from './Histogram';\nimport { forceCenter } from 'd3';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tableData: [],\n    }\n  }\n  \n  onFormSubmit = (data) => {\n    let result = nbd(data, 'frequency');\n    if (result) {\n      result.unique_words = result.data.length;\n      this.setState(prevState => ({tableData: [result, ... prevState.tableData]}),\n        this.setState({r: result.r,alpha: result.alpha, data: result.data, actual: result.actual, expected: result.expected, t: result.t, word_count: result.word_count, ll: result.ll})\n\n        // this.setState({r: result.r, alpha: result.alpha, data: result.data, t: result.t, word_count: result.word_count, ll: result.ll})\n      )\n    }\n  }\n\n  renderHist = () => {\n    if ( this.state.r && this.state.alpha && this.state.word_count && this.state.t) {\n      // return <Histogram data={this.state.data} r={this.state.r} alpha={this.state.alpha} t={this.state.t} word_count={this.state.word_count}/>\n      return <Histogram data={this.state.data} actual={this.state.actual} expected={this.state.expected}  r={this.state.r} alpha={this.state.alpha} t={this.state.t} word_count={this.state.word_count}/>\n    }\n  }\n  render()  { \n    return (\n      <div className=\"App\" style={{alignItems: 'center',justifyContent: 'center',display: 'flex', flexDirection:'column', padding: 50}}>\n        <h1>Measuring Lexical Diversity using the NBD</h1>\n        <div style={{paddingLeft: 100, paddingRight: 100, }}>\n          <p style={{textAlign: 'center', alignContent: 'center', justifyContent:'center'}}>Lexical Diversity is a measure of an individual's vocabulary breadth, often measured by computing the ratio of unique words to total words. While more sophisticated measures have been proposed, such measures are generally scale dependent. By fitting an NBD model to a person's given text, we can evaluate the heterogeneity of the word uniqueness within the text and provide a better measure of LD. In general, a lower \"r\" score indicates more heterogeneity and thus greater vocabulary breadth, while a higher \"r\" indicates more homogeneity and less breadth.</p>\n        </div>\n        <EssayForm onFormSubmit={this.onFormSubmit}/>\n        {this.renderHist()}\n        <div style={tableStyle}>\n          <Table columns={columns} data={this.state.tableData}/>\n        </div>\n        {/* <p>{this.state.r ? 'r is '+ this.state.r : ''}</p>\n        <p>{this.state.alpha ? 'alpha is ' + this.state.alpha.toFixed(3) : ''}</p>\n        <p>{this.state.t ? 't is ' + this.state.t : ''}</p>\n        <p>{this.state.ll ? 'Log-Likelihood is ' + this.state.ll.toFixed(3) : ''}</p>\n        <p>{this.state.data ? 'number of unique words is ' + this.state.data.length : ''}</p>\n        <p>{this.state.word_count ? 'number of total words is ' + this.state.word_count : ''}</p> */}\n      </div>\n    );\n  }\n}\n\nconst tableStyle = {\n  // padding: 1,\n  // borderSpacing: 1,\n  // border: 1,\n  // borderWidth: 1,\n  // // display: 'flex',\n  // // alignItems: 'center',\n  // // justifyContent: 'center',\n  // textAlign: 'center', \n  // alignContent: 'center', \n  // justifyContent:'center',\n  // paddingLeft: 100, \n  // paddingRight: 100,\n  // margin: 'auto'\n}\n\nconst columns = [\n  {\n    Header: \"Info\",\n    columns: [\n      {\n        Header: 'r-score',\n        accessor: 'r',\n      },\n      {\n        Header: 'alpha',\n        accessor: 'alpha',\n      },\n      {\n        Header: 't',\n        accessor: 't',\n      },\n      {\n        Header: 'Log Likelihood',\n        accessor: 'll',\n      },\n      {\n        Header: 'unique words',\n        accessor: 'unique_words',\n      },\n      {\n        Header: 'word count',\n        accessor: 'word_count',\n      },\n      {\n        Header: 'Chisq p-value',\n        accessor: 'chisq',\n      },\n      {\n        Header: 'degrees of freedom',\n        accessor: 'df',\n      },\n    ],\n  },\n  \n]\n\nfunction Table({ columns, data }) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  })\n\n  // Render the UI for your table\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(\n          (row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )}\n        )}\n      </tbody>\n    </table>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}